/*$Id: ToolKit.idl,v 1.8 2000/11/14 21:25:23 stefan Exp $
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1999 Graydon Hoare <graydon@pobox.com> 
 * Copyright (C) 1999, 2000 Stefan Seefeld <stefan@berlin-consortium.org> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Warsaw_ToolKit_idl
#define _Warsaw_ToolKit_idl

#include <Warsaw/Types.idl>
#include <Warsaw/Telltale.idl>
#include <Warsaw/Kit.idl>

module Warsaw
{
  interface Graphic;
  interface View;
  interface Controller;
  interface Trigger;
  interface Command;
  interface TextBuffer;
  interface StreamBuffer;
  interface DrawingState;
  interface Canvas;
  
  //. this kit provides common objects for very basic interaction tasks
  //. and Telltale Views such as bevels and indicators
  interface ToolKit : Kit
    {
      enum FrameType { none, inset, outset, convex, concav, colored};
      enum Direction { left, right, up, down};
      union FrameSpec switch (FrameType)
	{
	case inset:
	case outset:
	case convex:
	case concav:
	  Coord brightness;
	case colored:
	  Color foreground;
	};
      
      Graphic      debugger(in Graphic g, in string s);
      DrawingState decorator(in Graphic gg);
      Graphic      rgb(in Graphic gg, in Coord r, in Coord g, in Coord b);
      Graphic      alpha(in Graphic g, in Coord a);
      Graphic      lighting(in Graphic gg, in Coord r, in Coord g, in Coord b);
      
      Graphic      frame(in Graphic g, in Coord thickness, in FrameSpec spec, in boolean fill);
      Graphic      dynamic(in Graphic g, in Coord thickness,
			   in Telltale::Mask mask, in FrameSpec s1, in FrameSpec s2,
			   in boolean fill, in Telltale t);
      Graphic      framed_triangle(in Graphic g, in Coord thickness, in FrameSpec spec, in boolean fill, in Direction d);
      Graphic      dynamic_triangle(in Graphic g, in Coord thickness,
				    in Telltale::Mask mask, in FrameSpec s1, in FrameSpec s2,
				    in boolean fill, in Direction d, in Telltale t);
      
      Graphic      framed_diamond(in Graphic g, in Coord thickness, in FrameSpec spec, in boolean fill);
      Graphic      dynamic_diamond(in Graphic g, in Coord thickness,
				   in Telltale::Mask mask, in FrameSpec s1, in FrameSpec s2,
				   in boolean fill, in Telltale t);
      
      //   Graphic      filler(in Graphic g, in Color c);
      //   Graphic      indicator(in Graphic g, in Color c, in Telltale t);
      Trigger      button(in Graphic g, in Command c);
      Controller   toggle(in Graphic g);
      Controller   dragger(in Graphic g, in Command c);
      Controller   stepper(in Graphic g, in Command c);
      Controller   text_input(in Graphic g, in TextBuffer b);
      Controller   terminal(in Graphic g, in StreamBuffer b);
      Controller   group(in Graphic g);
      Canvas       create_canvas(in PixelCoord w, in PixelCoord h);
    };
};

#endif

