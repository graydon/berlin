//
// $id:$
//
// This source file is a part of the Berlin Project.
// Copyright (C) 1998 The Berlin Consortium 
// http://www.berlin-consortium.org
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public License
// as published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
// Author: ANOQ of the Sun
// EMail: anoq@berlin-consortium.org or anoq@vip.cybercity.dk

// Note: This is just a stripped down version of omniORB's
//       .hh file generated by omniidl2

#ifndef __Node_hh__
#define __Node_hh__

#include "support/dom/nocorba/CORBA.h"

#include "support/dom/nocorba/domDefs.hh"
#include "support/dom/nocorba/NoSuchAttributeException.hh"
#include "support/dom/nocorba/NotMyChildException.hh"
#include "support/dom/nocorba/NodeIterator.hh"
#ifndef __NodeIterator__
#define __NodeIterator__
class   NodeIterator;
typedef NodeIterator* NodeIterator_ptr;
typedef NodeIterator_ptr NodeIteratorRef;
class _sk_NodeIterator;
#endif

#ifndef __Node__
#define __Node__
class   Node;
typedef Node* Node_ptr;
typedef Node_ptr NodeRef;
#endif

class Node : virtual public CORBA::Object
{
public:

  enum NodeType { DOCUMENT, ELEMENT, ATTRIBUTE, PI, COMMENT, TEXT };

  virtual NodeType  getNodeType (  ) = 0;
  virtual Node_ptr  getParentNode (  ) = 0;
  virtual NodeIterator_ptr  getChildNodes (  ) = 0;
  virtual CORBA::Boolean  hasChildNodes (  ) = 0;
  virtual Node_ptr  getFirstChild (  ) = 0;
  virtual Node_ptr  getPreviousSibling (  ) = 0;
  virtual Node_ptr  getNextSibling (  ) = 0;
  virtual Node_ptr  insertBefore ( Node_ptr  newChild, Node_ptr  refChild ) = 0;
  virtual Node_ptr  replaceChild ( Node_ptr  newChild, Node_ptr  oldChild ) = 0;
  virtual Node_ptr  removeChild ( Node_ptr  oldChild ) = 0;
  virtual void setParentNode__ ( Node_ptr  newParent ) = 0;
  virtual void setPreviousSibling__ ( Node_ptr  newPrevSib ) = 0;
  virtual void setNextSibling__ ( Node_ptr  newNextSib ) = 0;
  //static Node_ptr _duplicate(Node_ptr);
  static Node_ptr _narrow(CORBA::Object_ptr)
    { return (Node_ptr)0; }
  //static Node_ptr _nil();
protected:

  Node() {
  }
  virtual ~Node() {}
private:

  //Node(const Node&);
  //Node &operator=(const Node&);
};

class _sk_Node :  public virtual Node
{};

#endif // __Node_hh__
