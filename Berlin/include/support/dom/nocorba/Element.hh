//
// $id:$
//
// This source file is a part of the Berlin Project.
// Copyright (C) 1998 The Berlin Consortium 
// http://www.berlin-consortium.org
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public License
// as published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
// Author: ANOQ of the Sun
// EMail: anoq@berlin-consortium.org or anoq@vip.cybercity.dk

// Note: This is just a stripped down version of omniORB's
//       .hh file generated by omniidl2

#ifndef __Element_hh__
#define __Element_hh__

#include "support/dom/nocorba/CORBA.h"

#include "support/dom/nocorba/Node.hh"
#include "support/dom/nocorba/domDefs.hh"
#include "support/dom/nocorba/NoSuchAttributeException.hh"
#include "support/dom/nocorba/NotMyChildException.hh"
#include "support/dom/nocorba/NodeIterator.hh"
#include "support/dom/nocorba/Attribute.hh"
#ifndef __Element__
#define __Element__
class   Element;
typedef Element* Element_ptr;
typedef Element_ptr ElementRef;
#endif

class Element :  public virtual Node
{
public:

  virtual wstring * getTagName (  ) = 0;
  virtual NodeIterator_ptr  getAttributes (  ) = 0;
  virtual wstring * getAttribute ( const wstring & name ) = 0;
  virtual void setAttribute ( const wstring & name, const wstring & value ) = 0;
  virtual void removeAttribute ( const wstring & name ) = 0;
  virtual Attrib_ptr  getAttributeNode ( const wstring & name ) = 0;
  virtual void setAttributeNode ( Attrib_ptr  newAttr ) = 0;
  virtual void removeAttributeNode ( Attrib_ptr  oldAttr ) = 0;
  virtual void getElementsByTagName ( const wstring & tagname ) = 0;
  virtual void normalize (  ) = 0;
  //static Element_ptr _duplicate(Element_ptr);
  static Element_ptr _narrow(CORBA::Object_ptr)
    { return (Element_ptr)0; }
  //static Element_ptr _nil();

protected:

  Element()
  {}
  virtual ~Element() {}
};

class _sk_Element :  public virtual _sk_Node, public virtual Element
{};

#endif // __Element_hh__
