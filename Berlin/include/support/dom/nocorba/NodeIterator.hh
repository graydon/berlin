//
// $id:$
//
// This source file is a part of the Berlin Project.
// Copyright (C) 1998 The Berlin Consortium 
// http://www.berlin-consortium.org
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public License
// as published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
// Author: ANOQ of the Sun
// EMail: anoq@berlin-consortium.org or anoq@vip.cybercity.dk

// Note: This is just a stripped down version of omniORB's
//       .hh file generated by omniidl2

#ifndef __NodeIterator_hh__
#define __NodeIterator_hh__

#include "support/dom/nocorba/CORBA.h"

#include "support/dom/nocorba/Node.hh"
#include "support/dom/nocorba/domDefs.hh"
#include "support/dom/nocorba/NoSuchAttributeException.hh"
#include "support/dom/nocorba/NotMyChildException.hh"
#ifndef __Node__
#define __Node__
class   Node;
typedef Node* Node_ptr;
typedef Node_ptr NodeRef;
class _sk_Node;
#endif

#ifndef __NodeIterator__
#define __NodeIterator__
class   NodeIterator;
typedef NodeIterator* NodeIterator_ptr;
typedef NodeIterator_ptr NodeIteratorRef;
#endif

class NodeIterator : CORBA::Object
{
public:

  virtual CORBA::ULong  getLength (  ) = 0;
  virtual CORBA::ULong  getCurrentPos (  ) = 0;
  virtual CORBA::Boolean  atFirst (  ) = 0;
  virtual CORBA::Boolean  atLast (  ) = 0;
  virtual Node_ptr  toNextNode (  ) = 0;
  virtual Node_ptr  toPrevNode (  ) = 0;
  virtual Node_ptr  toFirstNode (  ) = 0;
  virtual Node_ptr  toLastNode (  ) = 0;
  virtual Node_ptr  moveTo ( CORBA::Long  n ) = 0;
  //static NodeIterator_ptr _duplicate(NodeIterator_ptr);
  static NodeIterator_ptr _narrow(CORBA::Object_ptr)
    { return (NodeIterator_ptr)0; }
  //static NodeIterator_ptr _nil();
protected:

  NodeIterator()
  {}
  virtual ~NodeIterator() {}

};

class _sk_NodeIterator :  public virtual NodeIterator
{};

#endif // __NodeIterator_hh__
