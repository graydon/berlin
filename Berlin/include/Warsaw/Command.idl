/*$Id: Command.idl,v 1.5 1999/10/19 21:07:52 gray Exp $
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1998 Graydon Hoare <graydon@pobox.com> 
 * Copyright (C) 1999 Stefan Seefeld <seefelds@magellan.umontreal.ca> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Command_idl
#define _Command_idl

interface Command;

#include "Message.idl"

interface Command
//. commands are anonymous encapsulated actions. 
//. you never know what they'll do.
{
  void execute(in any a);
};

interface Reactor : MessageListener
//. a reactor is a listener which has configurable behaviour based on the
//. Message types it receives
{
  void bind(in CORBA::TypeCode ty, in Command c);
  void unbind(in CORBA::TypeCode ty, in Command c);
  attribute boolean active;
};

struct ReactorBinding
//. ReactorBinding is just a helper to make the sequence-initialization below a
//. little simpler.
{
  CORBA::TypeCode ty;
  Command cmd;
};

typedef sequence<ReactorBinding> ReactorBindingList;

#endif /* _Command_idl */
