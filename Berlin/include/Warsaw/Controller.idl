/*$Id: Controller.idl,v 1.2 1999/08/26 13:55:39 gray Exp $
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1999 Stefan Seefeld <seefelds@magellan.umontreal.ca> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Controller_idl
#define _Controller_idl

#include "Graphic.idl"
#include "Telltale.idl"

interface PickTraversal;
interface Focus;

interface Controller : Graphic, Telltale
//. The Controller interface defines the mechanisms for the logical
//. composition of user interface objects. Controller is a Graphic subtype
//. and can delegate the presentation and geometry of the
//. controller to another graphic using Graphic::body.
//.
//. A controller implementation should define the pick operation to be
//. opaque in the sense that the controller should appear as a leaf Graphic
//. relative to pick calls.  This approach hides the controller's
//. structure from surrounding objects.
//.
//. Unlike graphics, which may be organized with sharing to form
//. a directed-acyclic graph, controllers must be organized in
//. a strict hierarchy.  Using a hierarchy simplifies
//. input handling and focus management.
{
  Controller parentController();
  void appendController(in Controller c);
  void prependController(in Controller c);
  void insertController(in Controller i, in Controller c);
  void replaceController(in Controller i, in Controller c);
  void removeController(in Controller c);
  void setParentController(in Controller c);

  void requestFocus(in Controller c);//, in Event::Device d);
  boolean receiveFocus(in Focus f);
  void loseFocus(in Focus f);

  boolean handle(in PickTraversal t, in any a);
};

#endif /* _Controller_idl */
