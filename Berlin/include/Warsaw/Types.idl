/*$Id: Types.idl,v 1.5 1999/06/15 20:54:20 gray Exp $
 *
 * This source file is a part of the Berlin Project.
 * Portions Copyright (C) 1999 Stefan Seefeld <seefelds@magellan.umontreal.ca> 
 * Portions Copyright (C) 1999 Graydon Hoare <graydon@pobox.com> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Types_idl
#define _Types_idl

// !!!FIXME!!! this should become long long when it works
typedef unsigned long Time; 

typedef unsigned long Tag;
typedef double Coord;
typedef long PixelCoord;
enum Axis { xaxis, yaxis, zaxis };

struct Vertex 
{
  Coord x, y, z;
};

typedef double Alignment;

struct Color
{
  double red, green, blue;
  double alpha;
};

typedef sequence<Vertex> ControlPoints;
typedef sequence<double> EvalMesh;

struct Path
{
  ControlPoints p;
  EvalMesh m; // might be 0-length, in which case path is lines
};

struct Patch
{
  ControlPoints p;
  EvalMesh m; // might be 0-length, in which case patch is quads
  
  // the strides define the width of a row, since the above sequences
  // are flattened 2-dimeesional arrays.
  
  long meshStride, controlStride;
};


////////////////////////////////////////////////////////////////////////////////////
//this section defines the base types you use if you are processing
//text in berlin.  it does not define any of the text processing
//interfaces. those are over in the Text.idl file
////////////////////////////////////////////////////////////////////////////////////

// this is a character in the unicode range U+0000 - U+FFFF. It is a
// coded representation of a "unit" of textual information. it is not
// a picture on a screen, nor a particular semantic value. it is only
// meaningful in the context of an application, a locale, and a human
// reader of a particular language.
typedef unsigned short Unichar;

// this is a sequence of unichars. they have a logical memory ordering
// which corresponds to the sequence in which they are entered into a
// computer, over time, by a human or other process. Even if they are
// in a right-to-left writing system, they always go in this order
// when considered as characters. Only when transformed to glyphs do
// they get special layout properties like screen direction.
typedef sequence<Unichar> Unistring;

// this is an opaque index which, when associated with a given font
// resource, points into a table of glyphs. Since each font resource
// organizes their tables differently, this is assumed to actually
// point into an indirection table hidden behind the implementation of
// a font resource. Nonetheless it identifies a single concrete chunk
// of rendering logic inside the font for producing a particular image
// on screen (or paper). When you communicate with a font, you are
// primarily exchanging chunks of characters for chunks of glyph
// indicies.
typedef unsigned long GlyphIndex;

// a feature is some numeric code for a "special trick" a font
// resource knows how to do, in choosing glyphs or rearranging
// text. Since there are literally hundreds of such features and they
// are largely miscategorized and half-broken, we can't do anything
// much more generic than just asking for features by number and
// hoping we get some of them. It's sad but such is life.
typedef unsigned long FeatureType;

// each feature usually has a number of states it can be set to, like
// on/off or high/middle/low or big/medium/small/tiny or
// oblique/narrow/slanted/wiggly or similarly rediculous arbitrary
// typography terms. So this is the value type. it's meaning is totally, 
// hopelessly mired in the individual conventions of each font format, 
// font file, font maker, and phaze of the moon.
typedef unsigned long FeatureValue;

// when you are loading a font, you will most likely query its
// features. You do this by running down all the features you want,
// and reading off a list of feature values the font will let you set
// the feature to. this is the return type of such a feature query.
typedef sequence<FeatureValue> FeatureValueList;

#endif /* _Types_idl */
