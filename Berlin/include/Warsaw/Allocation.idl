/*$Id: Allocation.idl,v 1.2 1999/06/18 19:28:44 gray Exp $
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1999 Stefan Seefeld <seefelds@magellan.umontreal.ca> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */
#ifndef _Allocation_idl
#define _Allocation_idl

interface Region;
interface Transform;
interface Screen;

interface Allocation
//. Allocation is used in the process of retreiving
//. cumulative geometry information for a given graphic.
//. This information is used to determine what regions to
//. damage in order to redraw the graphic.
{
  struct Info
    //. Info holds the region and transformation for one
    //. appearance of the graphic.
  {
    Region allocation;
    Transform transformation;
    Screen root;
  };
  void add(in Region r, in Screen s);
  //. add a new entry. This is typically called by the root
  //. node of the scene graph (which is a screen). Since we
  //. want to be able to draw on multiple screens at a time,
  //. the Screen parameter has to be given
  long size();
  //. the number of entries in the Allocation list.
  Info get(in long l);
  //. used to access the l'th entry
};

#endif /* _Allocation_idl */
