//
// $Id: Event.idl,v 1.5 1999/11/11 16:13:56 stefan Exp $
//
// This source file is a part of the Berlin Project.
// Copyright (C) 1998 Graydon Hoare <graydon@pobox.com> 
// http://www.berlin-consortium.org
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU Library General Public License
// as published by the Free Software Foundation; either version 2 of
// the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// General Public License for more details.
//
// You should have received a copy of the GNU Library General Public
// License along with this program; if not, write to the Free Software
// Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
//
//
#ifndef _Event_idl
#define _Event_idl

#include <Types.idl>


module Event
//. the event module defines the payloads for messages which describe user
//. actions, like pointer actions or typing. 
{
  // typedef long Device;
  
  enum ActuationType {press, hold, release};
  struct Key
  {
    ActuationType whatHappened;
    Unichar theChar;
    unsigned long modifiers; // !!!FIXME!!! this needs some clear definition!
  };
  // this is just a timing pulse, to keep components up to date on what
  // time the server thinks it is.  
  struct PulseEvent
  {
    Time PulseTime;
  };
  struct Pointer
  {
    Vertex location;
    ActuationType whatHappened;
    unsigned long buttonNumber;
  };
      
  interface Filter
    //. An event filter controls the routing of events received
    //. by a display.
    {
      boolean handle(in any a);
      //. The filter should return true if it does not want the event
      //. to be processed by any other filters or the event's
      //. target window.
    };
};
#endif
