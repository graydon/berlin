/*$Id: Figure.idl,v 1.2 1999/10/04 22:57:10 gray Exp $
 *
 * This source file is a part of the Berlin Project.
 * Copyright (C) 1999 Stefan Seefeld <seefelds@magellan.umontreal.ca> 
 * http://www.berlin-consortium.org
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Library General Public
 * License as published by the Free Software Foundation; either
 * version 2 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Library General Public License for more details.
 *
 * You should have received a copy of the GNU Library General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 675 Mass Ave, Cambridge,
 * MA 02139, USA.
 */

#ifndef _Figure_idl
#define _Figure_idl

#include "Style.idl"
#include "Graphic.idl"

interface Figure : Graphic
{
  typedef sequence<Vertex> Vertices;
  //. The Vertices type defines a sequence of vertex structures
  //. for figures with an arbitrary number of vertices,
  //. such as polygons and B-splines.
  
  typedef short Mode;
  const Mode fill = 1;
  const Mode stroke = 2;

//   attribute Style figure_style;
//   attribute Mode figure_mode;

  attribute Mode type;
  attribute Color foreground;
  attribute Color background;

  void resize();
};

module Figures
{
  interface Point : Figure
  {
    attribute Vertex pt;
  };
  
  interface Line : Figure
  {
    attribute Vertex pt1, pt2;
  };

  interface Rectangle : Figure
  {
    attribute Vertex pt1, pt2;
  };

  interface Circle : Figure
  {
    attribute Vertex center;
    attribute Coord radius;
  };

  interface Ellipse : Figure
  {
    attribute Vertex center;
    attribute Coord radius1;
    attribute Coord radius2;
  };

  interface Path : Figure
  {
    Vertices handles();        
//     attribute boolean closed;
//     attribute boolean curved;
  };

};

#endif
