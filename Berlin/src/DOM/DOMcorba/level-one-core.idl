#ifndef __CORE__    
#define __CORE__

module DOM {

   interface DOM {
     Document            createDocument(in wstring type);
     boolean             hasFeature(in wstring feature);
  };

  interface DocumentContext {
    attribute Document       document;
 };

 interface DocumentFragment : Node {
   attribute Document       masterDoc;
};

interface Document : DocumentFragment {
  attribute Node           documentType;
  attribute Element        documentElement;
  attribute DocumentContextcontextInfo;
  DocumentContext     createDocumentContext();
  Element             createElement(in wstring tagName, 
                                    in AttributeList attributes);
  Text                createTextNode(in wstring data);
  Comment             createComment(in wstring data);
  PI                  createPI(in wstring name, 
                               in wstring data);
  Attribute           createAttribute(in wstring name, 
                                      in Node value);
  AttributeList       createAttributeList();
  TreeIterator        createTreeIterator(in Node node);
  NodeIterator        getElementsByTagName(in wstring tagname);
};

interface Node {
  // NodeType
  const int            DOCUMENT             = 1;
  const int            ELEMENT              = 2;
  const int            ATTRIBUTE            = 3;
  const int            PI                   = 4;
  const int            COMMENT              = 5;
  const int            TEXT                 = 6;

  int                 getNodeType();
  Node                getParentNode();
  NodeIterator        getChildNodes();
  boolean             hasChildNodes();
  Node                getFirstChild();
  Node                getPreviousSibling();
  Node                getNextSibling();
  Node                insertBefore(in Node newChild, 
                                   in Node refChild)  interface NotMyChildException {};
;
  Node                replaceChild(in Node newChild, 
                                   in Node oldChild)  interface NotMyChildException {};
;
  Node                removeChild(in Node oldChild)  interface NotMyChildException {};
;
};

interface NodeIterator {
  unsigned long       getLength();
  unsigned long       getCurrentPos();
  boolean             atFirst();
  boolean             atLast();
  Node                toNextNode();
  Node                toPrevNode();
  Node                toFirstNode();
  Node                toLastNode();
  Node                moveTo(in int n);
};

interface TreeIterator : NodeIterator {
  unsigned long       numChildren();
  unsigned long       numPreviousSiblings();
  unsigned long       numNextSiblings();
  Node                toParent();
  Node                toPreviousSibling();
  Node                toNextSibling();
  Node                toFirstChild();
  Node                toLastChild();
  Node                toNthChild(in int n)  interface NoSuchNodeException {};
;
};

interface Attribute {
  wstring             getName();
  wstring             getValue();
  attribute boolean        specified;
  wstring             toString();
};

interface AttributeList {
  Attribute           getAttribute(in wstring attrName);
  Attribute           setAttribute(in Attribute attr);
  Attribute           remove(in wstring attrName)  interface NoSuchAttributeException {};
;
  Attribute           item(in unsigned long index)  interface NoSuchAttributeException {};
;
  unsigned long       getLength();
};

interface Element : Node {
  wstring             getTagName();
  NodeIterator        getAttributes();
  wstring             getAttribute(in name name);
  void                setAttribute(in string name, 
                                   in string value);
  void                removeAttribute(in wstring name);
  Attribute           getAttributeNode(in name name);
  void                setAttributeNode(in Attribute newAttr);
  void                removeAttributeNode(in Attribute oldAttr);
  void                getElementsByTagName(in wstring tagname);
  void                normalize();
};

interface Text : Node {
  attribute wstring        data;
  void                append(in wstring data);
  void                insert(in int offset, 
                             in wstring data);
  void                delete(in int offset, 
                             in int count);
  void                replace(in int offset, 
                              in int count, 
                              in wstring data);
  void                splice(in Element element, 
                             in int offset, 
                             in int count);
};

interface Comment : Node {
  attribute wstring        data;
};

interface PI : Node {
  attribute wstring        name;
  attribute wstring        data;
};

}


#endif