#ifndef __HTML__    
#define __HTML__

//hb////-*-Mode: C++-*-////////////////////////////////////////////////////////
//                                                                           //
// NAME        :                                                             //
// DESCRIPTION :                                                             //
// HISTORY     :                                                             //
//                                                                           //
//he///////////////////////////////////////////////////////////////////////////

interface HTMLStyle {
  // Hook for level two
};

interface HTMLCollection : NodeList {
  Node namedItem(in wstring name);
  // Same interface, different semantics
};

interface HTMLDocument : Document
{
  // These are all methods, because they do some processing
  // of the document
  HTMLCollection  getImages();
  HTMLCollection  getApplets();
  HTMLCollection  getLinks();
  HTMLCollection  getForms();
  HTMLCollection  getAnchors();
  HTMLCollection  getScripts();

  // These are methods because we have not defined a list
  // of cookies anywhere in the model
  wstring         getCookie();
  wstring         setCookie(in wstring cookie);

  readonly attribute wstring       referrer;
  readonly attribute wstring       fileSize;
  readonly attribute wstring       fileCreatedDate;
  readonly attribute wstring       fileModifiedDate;
  readonly attribute wstring       fileUpdatedDate;
  readonly attribute HTMLLocation  location;

  attribute HTMLElement body;
};

interface HTMLLocation
{
  attribute wstring  href;

  attribute wstring  protocol;
  attribute wstring  host;
  attribute wstring  hostname;
  attribute wstring  port;
  attribute wstring  pathname;
  attribute wstring  query;
  attribute wstring  fragment;

  void     reload(in boolean flag);
  void     replace(in wstring url);
};

interface HTMLElement : Element
{
  attribute wstring         tagName;
  attribute wstring         className;
  attribute wstring         id;
  attribute HTMLStyle       style;
  attribute HTMLElement     parentElement;
  attribute wstring         title;
  attribute wstring         lang;
  attribute wstring         dir;
  attribute wstring         onClick;
  attribute wstring         onDblClick;
  attribute wstring         onKeyDown;
  attribute wstring         onKeyUp;
  attribute wstring         onKeypress;
  attribute wstring         onMouseOut;
  attribute wstring         onMouseOver;
  attribute wstring         onMouseMove;
  attribute wstring         onMouseUp;
  attribute wstring         onMouseDown;

  attribute HTMLCollection  all;

  readonly attribute HTMLDocument document;

  boolean contains(in HTMLElement pChild);

  // Note the use of Object here!!!!
  void     addAttribute(in wstring name, in Object value, in long lFlags);
  Object   getAttribute(in wstring name,in long lFlags);
  boolean  removeAttribute(in wstring name, in long lFlags);
};

interface HTMLLinkElement : HTMLElement
{
  attribute wstring href;
  attribute wstring rel;
  attribute wstring rev;
  attribute wstring type;
  attribute wstring media;

  wstring getReadyState();
};

interface HTMLTitleElement : HTMLElement
{
  attribute wstring text;
};

interface HTMLMetaElement : HTMLElement
{
  // Can't you have a number of these?
  attribute wstring httpEquiv;

  attribute wstring content;
  attribute wstring name;
  attribute wstring text;
  attribute wstring url;
  attribute wstring charset;
};

interface HTMLBaseElement : HTMLElement
{
  attribute wstring href;
  attribute wstring target;
};

interface HTMLIsIndexElement : HTMLElement
{
  attribute wstring  prompt;
  attribute wstring  action;
};

interface HTMLStyleElement : HTMLElement
{
  attribute wstring type;
  attribute boolean disabled;
  attribute wstring media;
};

interface HTMLBodyElement : HTMLElement
{
  attribute wstring background;
  attribute wstring bgColor;
  attribute wstring text;
  attribute wstring link;
  attribute wstring vlink;
  attribute wstring alink;
};

interface HTMLFormElement : HTMLElement
{
  attribute wstring action;
  attribute wstring method;
  attribute wstring target;
  attribute wstring name;
  attribute long    length;

  attribute HTMLFormElement elements;
  
  // Note the use of Object here!!!!
  HTMLElement    getItem(in Object itemName, in Object index);
  
  HTMLCollection getTags(in wstring tagName);
};

interface HTMLSelectElement : HTMLElement
{
  attribute long     selectedIndex;
  attribute long     size;
  attribute boolean  multiple;
  attribute wstring  name;
  attribute wstring  type;
  attribute wstring  value;
  attribute boolean  disabled;
  attribute long     length;

  readonly attribute HTMLFormElement  form;
  attribute HTMLCollection            options;

  void add(in HTMLElement element, in HTMLElement before);
  void remove(in long index);

  HTMLElement       getItem(in wstring itemName);
  HTMLCollection    getTags(in wstring tagname);
};

interface HTMLOptionElement : HTMLElement
{
  attribute wstring         text;
  attribute long            index;
  attribute boolean         selected;
  attribute wstring         value;
  attribute boolean         defaultSelected;

  readonly attribute HTMLFormElement form;
};

interface HTMLFieldSetElement : HTMLElement
{
  attribute wstring align;
};

interface HTMLLegendElement : HTMLElement
{
  attribute wstring align;
};

interface HTMLInputTextElement : HTMLElement
{
  attribute wstring  value;
  attribute wstring  name;
  attribute boolean  disabled;
  attribute wstring  defaultValue;
  attribute long     size;
  attribute long     maxLength;
  attribute boolean  readOnly;
  attribute boolean  checked;
  attribute boolean  defaultChecked;

  readonly attribute HTMLFormElement form;
};

interface HTMLTextAreaElement : HTMLElement
{
  attribute wstring  type;
  attribute wstring  value;
  attribute wstring  name;
  attribute boolean  disabled;
  attribute wstring  defaultValue;
  attribute boolean  readOnly;
  attribute long     rows;
  attribute long     cols;
  attribute wstring  wrap;

  readonly attribute HTMLFormElement form;
};

interface HTMLButtonElement : HTMLElement
{
  attribute wstring  type;
  attribute wstring  value;
  attribute wstring  name;
  attribute boolean  disabled;

  readonly attribute HTMLFormElement form;
};


interface HTMLLabelElement : HTMLElement
{
  attribute wstring htmlFor;
  attribute wstring accessKey;
};

interface HTMLAnchorElement : HTMLElement
{
  attribute wstring target;
  attribute wstring href;
  attribute wstring rel;
  attribute wstring rev;
  attribute wstring name;
  attribute wstring accessKey;
  attribute long    tabIndex;
  attribute wstring charset;
};

interface HTMLBaseFontElement : HTMLElement
{
  attribute wstring color;
  attribute wstring face;
  attribute long    size;
};

interface HTMLBRElement : HTMLElement
{
  attribute wstring clear;
};

interface HTMLImgElement : HTMLElement
{
  attribute boolean  isMap;
  attribute wstring  useMap;
  attribute wstring  border;
  attribute long     vspace;
  attribute long     hspace;
  attribute wstring  alt;
  attribute wstring  src;
  attribute wstring  lowSrc;
  attribute wstring  align;
  attribute long     width;
  attribute long     height;
};

interface HTMLFontElement : HTMLElement
{
  attribute wstring color;
  attribute wstring face;
  attribute long    size;
};

interface HTMLModElement : HTMLElement
{
  attribute wstring cite;
  attribute wstring dateTime;
};

interface HTMLObjectElement : HTMLElement
{
  // Note the use of Object here!!!!
  attribute Object theObject;//FIXME: Was: object

  attribute wstring   classId;
  attribute wstring   data;
  attribute wstring   align;
  attribute wstring   name;
  attribute wstring   codeBase;
  attribute wstring   codeType;
  attribute wstring   code;    // This is almost certainly wrong
  attribute wstring   type;
  attribute long      width;
  attribute long      height;
  attribute wstring   altHtml;
  attribute long      vspace;
  attribute long      hspace;
  attribute long      tabIndex;

  readonly attribute HTMLFormElement form;
};

interface HTMLQuoteElement : HTMLElement
{
  attribute wstring cite;
};

interface HTMLScriptElement : HTMLElement
{
  attribute wstring  src;
  attribute wstring  text;
  attribute wstring  type;
  attribute wstring  language;
};

interface HTMLUListElement : HTMLElement
{
  attribute boolean compact;
  attribute wstring type;
};

interface HTMLOListElement : HTMLElement
{
  attribute boolean compact;
  attribute wstring type;
  attribute long    start;
};

interface HTMLLIElement : HTMLElement
{
  attribute wstring type;
  attribute long    value;
};

interface HTMLDListElement : HTMLElement { 
  attribute boolean compact;
};

interface HTMLDivElement : HTMLElement
{
  attribute wstring align;
};

interface HTMLHRElement : HTMLElement
{
  attribute wstring  align;
  attribute boolean  noShade;
  attribute long     width;
  attribute long     size;
};

interface HTMLParaElement : HTMLElement
{
  attribute wstring align;
};

interface HTMLHeaderElement : HTMLElement
{
  attribute wstring align;
};

interface HTMLMapElement : HTMLElement
{
  HTMLCollection getAreas();

  attribute wstring name;
};

interface HTMLAreaElement : HTMLElement
{
  attribute wstring  shape;
  attribute wstring  coords;
  attribute wstring  href;
  attribute wstring  target;
  attribute wstring  alt;
  attribute boolean  noHref;
  attribute long     tabIndex;
};

interface HTMLTableCaption : HTMLElement
{
  attribute wstring align;
};

interface HTMLTable : HTMLElement
{
  attribute long               cols;
  attribute wstring            border;
  attribute wstring            frame;
  attribute wstring            rules;
  attribute long               cellSpacing;
  attribute long               cellPadding;
  attribute wstring            bgColor;
  attribute wstring            align;
  attribute long               width;
  attribute HTMLTableCaption   caption;
  attribute HTMLTableSection   head;
  attribute HTMLTableSection   tfoot;


  HTMLCollection     getRows();
  HTMLCollection     getBodies();

  HTMLElement        createTHead();
  void               deleteTHead();

  HTMLElement        createTFoot();
  void               deleteTFoot();

  HTMLTableCaption   createCaption();
  void               deleteCaption();

  HTMLElement        insertRow(in long index);
  void               deleteRow(in long index);
};

interface HTMLTableCol : HTMLElement
{
  attribute long     span;
  attribute wstring  align;
  attribute wstring  valign;
  attribute long     width;
};

interface HTMLTableSection : HTMLElement
{
  HTMLCollection getRows();

  HTMLElement insertRow(in long index);
  void        deleteRow(in long index);
  
  attribute wstring align;
  attribute wstring valign;
};

interface HTMLTableRow : HTMLElement
{
  attribute long     rowIndex;
  attribute long     sectionRowIndex;
  attribute wstring  align;
  attribute wstring  valign;
  attribute wstring  bgColor;

  HTMLCollection getCells();

  HTMLElement insertCell(in long index);
  void        deleteCell(in long index);
};

interface HTMLTableCell : HTMLElement
{
  attribute long     cellIndex;
  attribute long     rowSpan;
  attribute long     colSpan;
  attribute wstring  align;
  attribute wstring  valign;
  attribute wstring  bgColor;
  attribute boolean  noWrap;
  attribute long     width;
  attribute long     height;
};

interface HTMLCommentElement : HTMLElement
{
  attribute wstring text;
};

interface HTMLFrameSetElement : HTMLElement
{
  attribute wstring rows;
  attribute wstring cols;
};

interface HTMLFrameElement : HTMLElement
{
  attribute wstring  src;
  attribute wstring  name;
  attribute boolean  noResize;
  attribute wstring  scrolling;
  attribute wstring  frameBorder;
  attribute long     marginWidth;
  attribute long     marginHeight;
};

interface HTMLIFrameElement : HTMLElement 
{
  attribute wstring  src;
  attribute wstring  name;
  attribute wstring  scrolling;
  attribute wstring  align;
  attribute long     marginWidth;
  attribute long     marginHeight;
  attribute long     width;
  attribute long     height;
};

#endif