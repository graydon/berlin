Source: berlin
Section: contrib/misc
Priority: extra
Maintainer: Aaron Van Couwenberghe <vanco@sonic.net>
Standards-Version: 2.5.0

Package: libberlin
Section: misc
Priority: extra
Architecture: any
Depends: libprague, libstdc++2.9-glibc2.1, zlib1g
Description: Core implementation library for the Berlin display server
 This library contains the core object definitions, operation routines,
 and plugin mechanisms for Berlin. The berlin 'server' is just a tiny
 executable that sits on top of this library, taking a very few steps
 toward configuration; the rest is up to this library.
 .
 In addition, this is the library that Warsaw (the CORBA stub library)
 makes calls to. It is possible to make calls directly to the libberlin
 API, but for interoperability's sake every call should be routed through
 CORBA.
 .
 Because of this setup, any client (given it's written correctly, of
 course) run from any machine of any architecture using any ORB from any
 network is capable of displaying to any Berlin server living on any
 machine, architecture, ORB, network, et al. This makes Berlin a highly
 interoperable display server.
 .
 If you don't know what to install to get Berlin up and running, just
 install package 'berlin' -- its dependencies will get you started.

Package: libberlin-dev
Section: misc
Priority: extra
Architecture: any
Depends: libberlin, libstdc++2.9-glibc2.1-dev
Description: Headers for the Berlin display server's core library
 Please note, that you should *not* usually use these includes directly
 for hte purpose of making calls. If you're gleaning some data structure
 type definitions, that's ok, but for anything else you should make calls
 to libwarsaw.
 .
 All currently available API documentation is available in the package
 'berlin-doc'

Package: berlin
Section: contrib/misc
Priority: extra
Architecture: any
Depends: libwarsaw, libprague, libberlin, liblayout, berlin-kit-drawing, berlin-kit-widget, libstdc++2.9-glibc2.1, omniorb, zlib1g
Description: The experimental Berlin display server
 From the website:
 .
 Berlin is a windowing system being actively developed by members of the
 free software community. Its features include a multilingual text rendering
 system, a set of extensible user interface components residing in-process
 with the display server, an advanced imaging model with strong support
 for hardware acceleration, and a persistent user-preferences database. 
 .
 Berlin is designed around 3 major existing standards: Unicode, OpenGL,
 and Corba. It is released under the GNU Library General Public License,
 and written entirely by volunteers using GNU/Linux, OmniORB, Mesa and Egcs
 -- all free software. 
 .
 Our long term goal is to produce the mostpowerful and flexible GUI
 possible, and to release it on as many hardware platforms and OSs as can
 be found. This effort will span several years, and include collaboration
 with numerous other projects.
 --- End quote. http://www.berlin-consortium.org
 .
 Please note that although Berlin is designed specifically for the goals
 listed in the previous quote, most of them have not been realized yet.
 However, a strong foundation is now in place, and other components should
 begin maturing in short order.
 .
 If you don't know what to install to get Berlin up and running, just
 install this package -- its dependencies will get you up and running.

Package: berlin-doc
Section: misc
Priority: extra
Architecture: all
Description: Documentation for the experimental Berlin display server
 This package contains all documentation that's currently available for the
 Berlin display server project. Most of this describes the internal workings
 of the display server and its components; not much documentation is
 available for the client API at this time. The best source of that type
 of information is your local CORBA orb's documentation and the IDL sources.

Package: berlin-demos
Section: contrib/misc
Priority: extra
Depends: libwarsaw, libprague, libberlin, berlin-kit-layout, berlin-kit-widget, berlin-kit-drawing, libstdc++2.9-glibc2.1, omniorb, zlib1g
Architecture: any
Description: Demos for the experimental Berlin display server
 This package contains three small demos written for the current Berlin
 display server. 'button' shows three buttons which can be 'clicked' (they
 invert when pressed), 'draggable' is a button that can be dragged around
 the screen, and 'terminal' -- well, I can't get it to work. Have fun, and
 be content knowing that for this humongous download, you can only see these
 three things.
 .
 In reality, however, the berlin display server is currently capable of much
 more. The only problem is the berlin project's shortage of manpower;
 representative demos aren't currently important enough to spend time on.
 To fix this awful dilemma by donating brain power to the berlin project,
 see http://www.berlin-consortium.org

Package: libwarsaw
Section: contrib/misc
Priority: extra
Architecture: any
Depends: omniorb, libstdc++2.9-glibc2.1
Description: A CORBA stub library defining Berlin's communication protocol
 Warsaw is the codename for Berlin's CORBA stub library. CORBA is berlin's
 communication protocol. This makes it possible for any client running on
 any machine of any architecture using any orb from any network can display
 itself to any machine of any architecture on any network that's running a
 Berlin display server.
 .
 This package and libwarsaw-dev are generated specifically by omniorb 2.7.1
 with special modifications, and are *only* compatible with Debian's version
 of omniorb. If you want to run clients from a different orb, get the
 package 'libwarsaw-idl' for the interface definitions that every ORB uses
 to generate a stub library and includes.

Package: libwarsaw-dev
Section: contrib/misc
Priority: extra
Architecture: any
Depends: libwarsaw, omniorb-dev, libberlin-dev, libstdc++2.9-glibc2.1-dev
Description: Development package for Berlin's CORBA stub library
 With Berlin, all clients must include headers from the CORBA stub library.
 These includes are generated by Debian's omniorb, and are *not* compatible
 with any other orb, even a hand built omniorb (Debian's version has special
 modifications).
 .
 If you want to compile any clients for Berlin under an omniorb environment,
 you're going to need this package. If you want to build clients under a
 different ORB, you're going to need that ORB's stub compiler and the
 package 'libwarsaw-idl', which contains Warsaw's interface definitions.

Package: libwarsaw-idl
Section: misc
Priority: extra
Architecture: all
Suggests: omniorb-dev
Description: CORBA IDL for Warsaw, Berlin's stub library
 This package contains Warsaw's interface definitions. CORBA is Berlin's
 communication protocol; IDL is how this mechanism describes interoperable
 object interfaces. This IDL can be transformed into a stub library useable
 by any ORB to communicate with the Berlin display server.
 .
 If you want to experiment with Berlin from an orb other than omniorb,
 you're going to need to get this package and compile the IDL contained
 within.

Package: berlin-core-plugins
Section: contrib/misc
Priority: extra
Architecture: any
Depends: berlin-kit-drawing, berlin-kit-figure, berlin-kit-layout, berlin-kit-text, berlin-kit-widget
Description: Dummy package for the core Berlin plugins
 Berlin has many modular components called 'Kits' which are loaded in at
 runtime. You might wonder why I am so insane as to split Berlin up into
 so many packages, but this is done to make a point. Each one of these
 can be replaced at runtime (or during runtime) to use entirely different
 conventions; as such, alternate packages for each might come into
 existence. This possibility must be accomodated.
 .
 The job of a Kit is to construct common objects (with well-defined and
 consistent APIs) and return pointers to them to the server for use. They
 are entirely modular, capable of being replaced at or during runtime.
 .
 For example, Currently two drawingKits are planned (each DrawingKit
 constructs and displays graphics on its associated drawing device):
  An OpenGL kit, using Mesa and GGI for runtime display (currently working)
  A PostScript kit, for printing individual graphics, windows etc to a
    postscript printing device
 There has even been talk of a vanilla GGI drawingKit, but that would be
 a considerably more difficult task. Something such as this could be
 substituted for the GL DrawingKit, causing Berlin to run considerably
 faster.
 .
 Everything is a work in progress. The APIs and functionality of all of
 these are evolving rapidly. Again, if you don't know what to get because
 I've confused you with so many packages, get this; it'll fill out all of
 your plugins.
 .
 Please note that all plugin headers are included with libberlin-dev. This
 is because it would be entirely too confusing to split them all up, and
 headers for plugins replacing one another should be identical (as the
 plugins' APIs will be the same).

Package: libprague
Section: misc
Priority: extra
Architecture: any
Depends: zlib1g, libstdc++2.9-glibc2.1
Description: Prague, Berlin's OS level wrapper
 Prague wraps every function of the OS that's necessary for Berlin into a
 very simple, consistent API. If your OS is not POSIX compliant, no worries:
 simply write a new Prague.
 .
 Every operation of Berlin depends on this library's presence.

Package: libprague-dev
Section: misc
Priority: extra
Architecture: any
Depends: libprague, libstdc++2.9-glibc2.1-dev
Description: Development headers for Prague
 Prague is Berlin's OS abstraction layer. Every OS-dependent function is
 contained in this library. This alleviates much tension in the build and
 source trees of the rest of Berlin, as all cross-platform issues are
 resolved in Prague.
 .
 Other projects may find this library useful. However, please note that no
 attempts will be made to keep the API binary (or source) compatible in the
 future, although it's matured enough to suit Berlin for now.

Package: berlin-kit-drawing
Section: misc
Priority: extra
Architecture: any
Depends: libprague, libberlin, berlin-kit-text, freetype2, mesag3+ggi, libstdc++2.9-glibc2.1, zlib1g, libggi2, libgii0
Description: Berlin's display engine
 Berlin uses a plugin to define the most foundational drawing-related
 object. This Kit is in charge of creating the display and special drawing
 objects known as 'Paths'.
 .
 This plugin could be swapped at runtime, or during runtime to display any
 portion of the screen to any arbitrary device. Currently two drawingKits
 are planned:
  GLDrawingKit (currently operational): uses OpenGL to display the terminal
   to the screen. Mesa targetted at GGI is used.
  PSDrawingKit (planned): Will use PostScript to print the full contents of
   any view to a postscript device (like a printer).

Package: berlin-kit-figure
Section: misc
Priority: extra
Architecture: any
Depends: libprague, libberlin, libstdc++2.9-glibc2.1, zlib1g
Description: A Kit that handles basic shapes for Berlin
 This Kit is provided for programmer convenience. Basically, it defines
 a few different types of figures (square, rectangle, polygon, et al)
 for use in programs.
 .
 If you want a new type of figure in this Kit, you can just rebuild it with
 extra object code linked in.

Package: berlin-kit-layout
Section: misc
Priority: extra
Architecture: any
Depends: libprague, libberlin, libstdc++2.9-glibc2.1, zlib1g
Description: The 'layout manager' for Berlin
 This plugin contains Berlin's entire layout engine. This is somewhat
 similar to a window manager of X, but entirely different at the same time.
 In berlin, layout occurs at the application level. In fact, the difference
 between an 'application' and an 'applet' becomes entirely moot. See the
 documentation for more details.

Package: berlin-kit-text
Section: misc
Priority: extra
Architecture: any
Depends: libprague, libberlin, omniorb, libstdc++2.9-glibc2.1, zlib1g
Description: Berlin's text rendering engine
 This plugin contains Berlin's entire text rendering engine. Currently, only
 TrueType fonts are supported, but dropping in a different Kit with support
 for more font types will make Berlin automatically inherit that support.

Package: berlin-kit-widget
Section: misc
Priority: extra
Architecture: any
Depends: libprague, libberlin, libstdc++2.9-glibc2.1, zlib1g
Description: Berlin's pluggable base widget repository
 In any windowing environment, there are a select few types of widgets that
 will be useful to most applications. Beyond that, all widgets are custom.
 .
 As far as berlin is concerned, any entity that displays to the screen,
 perhaps handling input events, is a widget. Each conglomeration of widgets
 (aka "polyGraphic") is also considered a widget. Any widget that contains
 layout widgets can arbitrarily embed other widgets. As a result, any
 'application' can be arbitrarily embedded as an applet into any other
 application that contains layout widgets.
 .
 As you can see, widgets are entirely pluggable with Berlin. They can be
 remote, or contained in the local display server. This library will
 eventually contain all of the most common widget types (look at the widgets
 defined by GTK, or Qt, or Motif for an example), and will be loaded directly
 into the display server.
 .
 As a result, 'widget set', as was an issue with X, is entirely moot under
 Berlin. Any application using the standard (or a customized) API has a
 hot-swappable look and feel. This idea is extremely revolutionary: your
 entire desktop having pluggable widgets, look and feel. Applications will
 all display themselves consistently, regardless of who wrote them.
