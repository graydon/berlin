#!/usr/bin/env python
# Python Berlin client that implements a client-side menu
# Copyright (c) 2000 by Stephen Davies
# This file is licensed for use under the GPL.
#
# Tabstop is 8, SoftTabStop is 4, ShiftWidth is 4 (as per last line)
#
# Note that the menu api implemented here resembles more traditional
# state-heavy guis, rather than berlin's lightweight graphic model.
# Disclaimer: This is just an experiment :)

import sys, string, os
from omniORB import CORBA

# Import Berlin module
import berlin
from berlin import Label, Callback, nullAny

# Import the Warsaw stubs
import Warsaw, Unidraw, Layout
import Warsaw__POA

# Import Python client lib
import pywarsaw

Toggle_hover = 32L
Toggle_active = 64L

class MenuKit:
    """Pretend kit that builds menu objects"""
    def menu_bar(self):
	"""Returns a menubar object"""
	return MenuBar()
    def menu(self):
	"""Returns a menu object"""
	return Menu()
    def menu_item(self, label, callback):
	return MenuItem(label, None, callback)
    def menu_item_sub(self, label, submenu):
	return MenuItem(label, submenu)

class MenuButton (pywarsaw.PyController):
    """A button controller for menu items.
    This implementation shows a button with no frame, except for when the
    button is 'active' (mouse highlight) when it shows a frame.
    """
    def __init__(self, graphic):
	pywarsaw.PyController.__init__(self, 1)
	fspec = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.outset, 0.5)
	self.outframe = kits.tool.frame(graphic, 10., fspec, 0)
	fspec = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.none, 1.0)
	self.flatframe = kits.tool.frame(graphic, 10., fspec, 0)
	self._set_body(self.flatframe)


class MenuItem (pywarsaw.PyController):
    """Encapsulates a Menu item with label and optional submenu and callback.
    TODO: provide api to close all parent popups once an item is selected."""
    def __init__(self, label, submenu=None, callback=None):
	pywarsaw.PyController.__init__(self, 0)
	self.label = label
	self.submenu = submenu
	self.callback = callback
	if (self.submenu is not None):
	    self.submenu.parent_item = self
	self.callback_command = None
	self.__parent_menu = None
	self.__orientation = 0

	# Construct the graphics to display this item
	self.glabel = Label(self.label)
	#self.label = kits.layout.hmargin_lr_flexible(label,
	#    20., 0., 0., 20., 1000., 0.)
	self.button = self.glabel

	# Construct the dynamic frame that shows when in focus or not
	fspec_out = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.outset, 0.5)
	fspec_none = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.none, 1.0)
	self.frame = kits.tool.dynamic(self.button, 10.,
	    Toggle_hover, fspec_out, fspec_none, 
	    0, self._this())
	self._set_body(self.frame)

    def _set_parent_menu(self, parent):
	self.__parent_menu = parent

    def _get_parent_menu(self):
	return self.__parent_menu

    def _set_orientation(self, orientation):
	"0 means show below, 1 means show right"
	self.__orientation = orientation
	if orientation:
	    self.button = kits.layout.hbox_align_elements(0.)
	    self.button.append_graphic(self.glabel)
	    self.button.append_graphic(kits.layout.hfill())
	    if self.submenu:
		fspec_focus = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.outset, 0.8)
		fspec_none = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.outset, 0.3)
		tri = kits.tool.dynamic_triangle(None,
		    10., Toggle_hover, fspec_focus, fspec_none,
		    1, Warsaw.ToolKit.right, self._this())
		tri = kits.layout.fixed_size(tri, 140., 140.)
		tri = kits.layout.margin(tri, 30.)
		self.button.append_graphic(tri)
	    self.frame._set_body(self.button)

    def get_command(self):
	"Returns the cached CORBA callback command"
	if self.callback_command is None:
	    self.callback_command = Callback(self.clicked)._this()
	return self.callback_command

    def receive_focus(self, focus):
	print "receive focus"
	self.set(Toggle_hover)
	self.__parent_menu.set_active_submenu(self)
	return pywarsaw.PyController.receive_focus(self, focus)
    def lose_focus(self, device):
	print "lose focus"
	if not self.test(Toggle_active): self.clear(Toggle_hover)
	pywarsaw.PyController.lose_focus(self, device)
    def press(self, traversal, event):
	try:
	    # Call callback
	    if self.callback is not None:
		print "callback:",self.callback
		dir(self.callback)
		self.callback.execute(nullAny)
	    # Show submenu
	    if self.submenu is not None:
		self.set(Toggle_active)
		sub = self.submenu.get_pulldown()
		self.__parent_menu.set_active_submenu(self)
		# Move to right place
		lower, upper = traversal.current_allocation().bounds()
		if self.__orientation:to = Warsaw.Vertex(upper.x, lower.y, 0.)
		else: to = Warsaw.Vertex(lower.x, upper.y, 0.)
		to = traversal.current_transformation().transform_vertex(to)
		pos = sub._get_position()
		pos.x = to.x-pos.x; pos.y = to.y-pos.y
		# Do the move, and map
		any = CORBA.Any(Warsaw._tc_Vertex, pos)
		kits.desktop.move(sub).execute(any)
		kits.desktop.map(sub, 1).execute(nullAny)
	    # Else close this menu and all parents
	    else: self.cascade_close_up()
	except:
	    print "An error occurred somewhere in clicked()"
	    import traceback
	    traceback.print_exc()
	    self.cascade_close_up()
    def cascade_close_down(self):
	if self.test(Toggle_active):
	    self.clear(Toggle_active)
	    self.clear(Toggle_hover)
	    self.submenu.cascade_close_down()
    def cascade_close_up(self):
	self.cascade_close_down()
	self._get_parent_menu().cascade_close_up()

class Menu (pywarsaw.PyController):
    """Encapsulates a vertical menu of MenuItems"""
    def __init__(self, items = []):
	"Creates menu from sequence of items"
	pywarsaw.PyController.__init__(self, 1)
	self.items = list(items)
	self.graphic = None
	self.pulldown = None
	self.parent_item = None
	self._current_submenu = None
	
	self._init()
    
    def add_item(self, item):
	self.items.append(item)
	self._add_item(item)
    def _add_item(self, item):
	item._set_parent_menu(self)
	item._set_orientation(1)
	self.box.append_graphic(item._this())
	self.append_controller(item._this())


    def _init(self):
	"""Returns or creates the controller/graphic for this Menu"""
	# Create menu
	self.box = kits.layout.vbox()
	self._set_body(self.box)
	#fspec = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.outset, 0.2)
	#frame = kits.tool.frame(box, 10.0, fspec, 1)

	map(self._add_item, self.items)

    def set_active_submenu(self, item):
	"""Hides any submenu currently open and sets the given as open"""
	if item is self._current_submenu: return
	if self._current_submenu:
	    self._current_submenu.cascade_close_down()
	self._current_submenu = item
    def cascade_close_down(self):
	self.set_active_submenu(None)
	kits.desktop.map(self.get_pulldown(), 0).execute(nullAny)
    def cascade_close_up(self):
	"""Close this menu and all parents"""
	self.cascade_close_down()
	self.parent_item.cascade_close_up()
    def get_pulldown(self):
	"""Returns a top-level pulldown graphic for this Menu"""
	if self.pulldown is None:
	    self.pulldown = kits.desktop.pulldown(self._this())
	return self.pulldown

class MenuBar(Menu):
    """Subclasses Menu to provide a HORIZONTAL menu bar"""
    def _add_item(self, item):
	item._set_parent_menu(self)
	self.box.append_graphic(self.hspace)
	self.box.append_graphic(item._this())
	self.append_controller(item._this())
    def _init(self):
	"""Returns or creates the controller/graphic for this Menu"""
	# Create menu
	self.box = kits.layout.hbox()

	self.hspace = kits.layout.hspace(80.)
	map(self._add_item, self.items)
	
	spacer_box = kits.layout.hbox()
	spacer_box.append_graphic(self.box)
	spacer_box.append_graphic(kits.layout.hfill())

	fspec = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.outset, 0.2)
	frame = kits.tool.frame(spacer_box, 10.0, fspec, 1)
	self._set_body(frame)
    def cascade_close_up(self):
	"""Terminate the cascade traversal"""
	pass


class About:
    text = ["MenuTest","A test of client-side menus","Copyright (c) 2001 by Stephen Davies"]
    def __init__(self):
	"Creates the about box but doesn't map it"
	self.vbox = kits.layout.vbox_align_elements(0.5)
	for line in self.text: 
	    self.vbox.append_graphic(Label(line))
	self.button = kits.widget.button(Label("Okay"), self._get_hide_cmd())
	self.vbox.append_graphic(self.button)
	fspec = Warsaw.ToolKit.FrameSpec(Warsaw.ToolKit.none, 0)
	self.frame = kits.tool.frame(self.vbox, 0.0, fspec, 1)
	self.group = kits.tool.group(kits.tool.rgb(self.frame, 0.8, 0.8, 0.8))
	self.window = kits.desktop.transient(self.group)
	self._mapper_show = kits.desktop.map(self.window, 1)
	self._mapper_hide = kits.desktop.map(self.window, 0)

    def _get_hide_cmd(self):
	class HideCommand (Warsaw__POA.Command):
	    def __init__(self, about): self.about = about
	    def execute(self, any): self.about._mapper_hide.execute(any)
	return HideCommand(self)._this()

    def cb_show(self, any):
	self._mapper_show.execute(any)

class RunApp(Warsaw__POA.Command):
    """Small wrapper command which calls a python function with a single
    argument which is the Any."""
    def __init__(self, command, *args):
	self.command = command
	self.args = args
    def execute(self, any):
	print "Running",self.command, self.args
	if os.fork() == 0:
	    os.execv(self.command, self.args)
	    print "Failed"

class MenuApp (berlin.App):
    def run(self):
	def add(menu, items): 
	    for item in items: 
		menu.add_item(item)
	    return menu
	kit = MenuKit()
	menu = add(kit.menu_bar(), [
	    kit.menu_item_sub('Test', add(kit.menu(), [
		kit.menu_item_sub('New', add(kit.menu(), [
		    kit.menu_item('One', None),
		    kit.menu_item('Two', None),
		    kit.menu_item('Three', None),
		])),
		kit.menu_item_sub('Submenu', add(kit.menu(), [
		    kit.menu_item('One', None),
		    kit.menu_item('Two', None),
		    kit.menu_item('Three', None),
		])),
		kit.menu_item('Open...', None),
		kit.menu_item('Close', None),
		kit.menu_item('Quit', Callback(self.exit)),
	    ])),
	    kit.menu_item_sub('Clients', add(kit.menu(), [
		kit.menu_item_sub('C++', add(kit.menu(), [
		    kit.menu_item('demo', RunApp('../../build/bin/demo')),
		    kit.menu_item('canvas', RunApp('../../build/bin/canvas','','-r','ggi-dots')),
		])),
		kit.menu_item_sub('Python', add(kit.menu(), [
		    kit.menu_item('demo', RunApp('demo.py')),
		    kit.menu_item('transform', RunApp('transform.py')),
		    kit.menu_item('clock', RunApp('graphictest')),
		])),
	    ])),
	    kit.menu_item_sub('Help', add(kit.menu(), [
		kit.menu_item('Contents', None),
		kit.menu_item('About', Callback(About().cb_show)),
	    ])),
	])

	vbox = kits.layout.vbox()
	vbox.append_graphic(menu._this())
	contents = kits.figure.pixmap(kits.image.create("marble.png"))
	grid = kits.layout.fixed_grid(Layout.Grid.Index(5,4))
	for i in range(5*4):
	    grid.append_graphic(contents)
	vbox.append_graphic(kits.layout.fixed_size(grid,6400.,4800.))

	self.window = kits.desktop.shell(kits.tool.group(vbox))
	pos = self.window._get_position()
	pos.x = -pos.x; pos.y = -pos.y-210.
	kits.desktop.move(self.window).execute(CORBA.Any(Warsaw._tc_Vertex, pos))
	#pos.x = 6400.; pos.y = 4800.
	#kits.desktop.resize(self.window).execute(CORBA.Any(Warsaw._tc_Vertex, pos))
	#kits.desktop.map(self.window, 1).execute(nullAny)

    def exit(self, any):
	app.quit.set()


def main():
    # Create the singletons
    global app, kits, connection
    connection = berlin.get_connection()
    kits = berlin.get_kits()
    app = MenuApp()

    app.run()

    # Wait for the quit event
    app.quit.wait()

    # Tell the orb to shutdown (and wait for pending calls to complete)
    connection.orb.shutdown(1)

if __name__ == '__main__':
    main()

# vim: ts=8:sts=4:sw=4
